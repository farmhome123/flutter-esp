
#include <BLEDevice.h>
#include <BLEServer.h>
#include <BLEUtils.h>
#include <BLE2902.h>

BLEServer *pServer = NULL;
BLECharacteristic * pTxCharacteristic;
bool deviceConnected = false;
bool oldDeviceConnected = false;
uint8_t txValue = 0;

#define SERVICE_UUID           "6E400001-B5A3-F393-E0A9-E50EBBBBB000"
#define CHARACTERISTIC_UUID_RX "6E400002-B5A3-F393-E0A9-E50EBBBBB000"
#define CHARACTERISTIC_UUID_TX "6E400003-B5A3-F393-E0A9-E50EBBBBB000"
const char * BLE_Name = "ESP-01";

String lists[10] = {"RX00#", "RX0101#", "RX0299#", "RX03102030405060708090#", "RX04#", "RX05#", "RX0601245060#", "RX07005050#", "RX080199#", "LCX01#"};
int counts = 0;

class MyServerCallbacks: public BLEServerCallbacks {
    void onConnect(BLEServer* pServer) {
      deviceConnected = true;
    };
    void onDisconnect(BLEServer* pServer) {
      deviceConnected = false;
    }
};


class MyCallbacks: public BLECharacteristicCallbacks {
    void onWrite(BLECharacteristic *pCharacteristic) {
      std::string rxValue = pCharacteristic->getValue();
      if (rxValue.length() > 0) {
        String command = "";
        for (int i = 0; i < rxValue.length(); i++) {
          command += rxValue[i];
        }
        Serial.println(command);
      }
    }
};

void setup() {
  Serial.begin(115200);
  BLEDevice::init(BLE_Name);
  pServer = BLEDevice::createServer();
  pServer->setCallbacks(new MyServerCallbacks());
  BLEService *pService = pServer->createService(SERVICE_UUID);
  pTxCharacteristic = pService->createCharacteristic(
                        CHARACTERISTIC_UUID_TX,
                        BLECharacteristic::PROPERTY_NOTIFY
                      );
  pTxCharacteristic->addDescriptor(new BLE2902());
  BLECharacteristic * pRxCharacteristic = pService->createCharacteristic(
      CHARACTERISTIC_UUID_RX,
      BLECharacteristic::PROPERTY_WRITE
                                          );
  pRxCharacteristic->setCallbacks(new MyCallbacks());
  pService->start();
  pServer->getAdvertising()->start();
}
unsigned long posts = millis();
String str = "";
void loop() {
  if (!deviceConnected && oldDeviceConnected) {
    pServer->startAdvertising(); // restart advertising
    Serial.println("DisConnected");
    oldDeviceConnected = deviceConnected;
  }
  if (deviceConnected && !oldDeviceConnected) {
    Serial.println("Connected");
    //    counts = 0;
    posts = millis();
    oldDeviceConnected = deviceConnected;
  }
  if (Serial.available() > 0) {
    char c = Serial.read();
    str += c;

    if (c == '\n') {
      int cc = str.toInt();
      if (cc < 10) {
        pTxCharacteristic->setValue(lists[cc].c_str());
        pTxCharacteristic->notify();
        Serial.println(lists[cc].c_str());
        Serial.println(cc);
      }
      str = "";
    }

  }
  //  if (long(millis()) - posts >= 10000) {
  //    //    String datas "RY" = String(random(00, 09)) String datas "#" ;
  //    (counts >=9 ) ? counts = 0 : counts++;
  //    pTxCharacteristic->setValue(lists[counts].c_str());
  //    pTxCharacteristic->notify();
  //    Serial.println(lists[counts].c_str());
  //    posts = millis();
  //  }
}